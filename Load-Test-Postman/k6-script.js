// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";
import { sleep } from "k6";
import http from "k6/http";

export let options = { maxRedirects: 4 };

export const options = {
  stages: [
    { duration: "1m", target: 20 },
    { duration: "3m", target: 20 },
    { duration: "1m", target: 0 }
  ],
  ext: {
    loadimpact: {
      distribution: {
        "amazon:de:frankfurt": { loadZone: "amazon:de:frankfurt", percent: 100 }
      }
    }
  }
};

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "getOrCreatePseudonymForList",
    id: "320fe4c8-7960-4b79-a211-0ead25e743c1",
    method: "POST",
    address: "http://localhost:8080/gpas/gpasService",
    data:
      '<?xml version="1.0" encoding="utf-8"?>\r\n<Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">\r\n  <Body>\r\n    <getOrCreatePseudonymForList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://psn.ttp.ganimed.icmvc.emau.org/">\r\n      {{text}}\r\n      <domainName xmlns="">test</domainName>\r\n    </getOrCreatePseudonymForList>\r\n  </Body>\r\n</Envelope>',
    headers: {
      "Content-Type": "text/xml"
    },
    pre() {
      var samplecount = 49999;
      var min = 10000000;
      var max = 999999999;
      var i;
      var text = "";
      var random = Math.floor(Math.random() * (max - min)) + min;
      random = "pri_" + random.toString();

      for (i = 1; i <= samplecount; i++) {
        var random = Math.floor(Math.random() * (max - min)) + min;
        random = "pri_" + random.toString();
        text += "<values xmlns=''>" + random + "</values>";
      }

      pm.globals.set("text", text);
    },
    post(response) {
      pm.test("Status test", function() {
        pm.response.to.have.status(200);
      });
    }
  });
}
